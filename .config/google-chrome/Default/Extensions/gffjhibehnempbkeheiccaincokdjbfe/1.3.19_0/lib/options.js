// Generated by CoffeeScript 1.4.0

$(document).ready(function() {
  var AU, accounts, add_account, add_label, backgroundPage, boolIdArray, checkUserPermission, handleAudioFile, loadLabels, playNotificationSound, remove_account, remove_label, requestUserPermission, restore_options, save_options, showContent, spawnIconRow, storage, toggleCheckBox;
  backgroundPage = chrome.extension.getBackgroundPage();
  AU = backgroundPage.AU;
  storage = backgroundPage.storage;
  boolIdArray = ['hide_count', 'showfull_read', 'check_gmail_off', 'open_tabs', 'archive_read', 'no_mailto', 'sound_off', 'animate_off', 'show_notification'];
  accounts = void 0;
  save_options = function() {
    var adsEnabled, i, iconRadios, id, previewRadios, value, _i, _len;
    console.log('save options');
    for (_i = 0, _len = boolIdArray.length; _i < _len; _i++) {
      id = boolIdArray[_i];
      value = Boolean($('#' + id).attr('checked'));
      storage.set('gc_' + id, value);
      console.log('saved: ' + id + ' as ' + value);
    }
    iconRadios = document.forms[0].icon_set;
    for (i in iconRadios) {
      if (iconRadios[i].checked) {
        storage.set('gc_icon_set', iconRadios[i].value);
        break;
      }
    }
    previewRadios = document.forms[0].preview_setting;
    for (i in previewRadios) {
      if (previewRadios[i].checked) {
        storage.set('gc_preview_setting', Number(previewRadios[i].value));
        break;
      }
    }
    storage.remove('gc_poll');
    storage.remove('gc_dn_timeout');
    storage.remove('gc_accounts');
    adsEnabled = !document.getElementById('disable_ad_support').checked;
    AU.support.toggle(adsEnabled);
    storage.set('gc_poll', parseInt(document.getElementById('poll').value));
    storage.set('gc_dn_timeout', parseInt(document.getElementById('dn_timeout').value));
    storage.set('gc_language', document.getElementById('languages').value);
    storage.set('gc_check_label', document.getElementById('check_label').value);
    storage.set('gc_open_label', document.getElementById('open_label').value);
    storage.set('gc_sn_audio', document.getElementById('sn_audio').value);
    if (accounts.length > 0) {
      storage.set('gc_accounts', accounts);
    }
    if ((storage.get('gc_sn_audio')) === 'custom') {
      try {
        storage.set('gc_sn_audio_raw', document.getElementById('sn_audio_enc').value);
      } catch (e) {
        alert(e);
      }
    } else {
      storage.set('gc_sn_audio_raw', null);
    }
    return backgroundPage.init();
  };
  restore_options = function() {
    var acc_sel, adsEnabled, i, iconFound, iconRadios, id, k, lang, langSel, previewRadios, previewSetting, v, value, _i, _j, _languages, _len, _len1;
    showContent(0);
    for (_i = 0, _len = boolIdArray.length; _i < _len; _i++) {
      id = boolIdArray[_i];
      value = storage.get('gc_' + id);
      $('#' + id).attr('checked', value);
      console.log('restored: ' + id + ' as ' + value);
    }
    spawnIconRow('set1', 'Default');
    spawnIconRow('set2', 'Default Grey');
    spawnIconRow('set3', 'Default White');
    spawnIconRow('set11', 'Native');
    spawnIconRow('set12', 'Native Grey');
    spawnIconRow('set8', 'Gmail Glossy');
    spawnIconRow('set9', 'Gmail Mini');
    spawnIconRow('set10', 'Gmail Monochrome');
    spawnIconRow('set4', 'Alternative 1');
    spawnIconRow('set5', 'Alternative 2');
    spawnIconRow('set6', 'Chromified Classic');
    spawnIconRow('set7', 'Chromified Grey');
    iconRadios = document.forms[0].icon_set;
    iconFound = false;
    for (i in iconRadios) {
      if (iconRadios[i].value === storage.get('gc_icon_set')) {
        iconRadios[i].checked = true;
        iconFound = true;
        break;
      }
    }
    if (!iconFound) {
      iconRadios[0].checked = true;
    }
    previewRadios = document.forms[0].preview_setting;
    previewSetting = storage.get('gc_preview_setting');
    $('#' + 'preview_setting' + previewSetting).prop('checked', true);
    if (storage.get('gc_poll') != null) {
      document.getElementById('poll_' + storage.get('gc_poll')).selected = true;
    }
    if (storage.get('gc_dn_timeout') != null) {
      document.getElementById('dn_timeout_' + storage.get('gc_dn_timeout')).selected = true;
    }
    if (storage.get('gc_check_label') != null) {
      document.getElementById('check_label_' + storage.get('gc_check_label')).selected = true;
    }
    if (storage.get('gc_open_label') != null) {
      document.getElementById('open_label_' + storage.get('gc_open_label')).selected = true;
    }
    adsEnabled = AU.support.enabled();
    document.getElementById('disable_ad_support').checked = !adsEnabled;
    if (!adsEnabled) {
      $('#donate_frame').show();
    }
    accounts = storage.get('gc_accounts');
    if (accounts == null) {
      accounts = [];
    }
    langSel = document.getElementById('languages');
    _languages = (function() {
      var _results;
      _results = [];
      for (k in languages) {
        v = languages[k];
        _results.push(v);
      }
      return _results;
    })();
    _languages.sort(function(a, b) {
      a = a.what.toLowerCase();
      b = b.what.toLowerCase();
      if (a > b) {
        return 1;
      }
      if (a < b) {
        return -1;
      }
      return 0;
    });
    for (_j = 0, _len1 = _languages.length; _j < _len1; _j++) {
      lang = _languages[_j];
      langSel.add(new Option(lang.what, lang.id), lang.id);
    }
    langSel.value = storage.get('gc_language');
    acc_sel = document.getElementById('accounts');
    for (i in accounts) {
      if (!(accounts[i] != null) || !(accounts[i].domain != null)) {
        break;
      }
      acc_sel.add(new Option(accounts[i].domain), null);
    }
    $('#sn_audio').val(storage.get('gc_sn_audio'));
    $('#sn_audio_enc').val(storage.get('gc_sn_audio_raw'));
    $('#sn_audio').change(function() {
      if (this.value === 'custom') {
        $('#sn_audio_src').show();
      } else {
        $('#sn_audio_src').hide();
      }
    });
    if (storage.get('gc_sn_audio') !== 'custom') {
      $('#sn_audio_src').hide();
    }
  };
  loadLabels = function(labels) {
    return $(labels).each(function(i) {
      return $('#labels')[0].add(new Option(labels[i]));
    });
  };
  showContent = function(contentId) {
    $('.content').each(function(index) {
      if (!$(this).hasClass('invisible')) {
        $(this).addClass('invisible');
      }
      if (index === contentId) {
        return $(this).removeClass('invisible');
      }
    });
    return $('ul.menu > li > a').each(function(index) {
      $(this).removeClass('active');
      if (index === contentId) {
        return $(this).addClass('active');
      }
    });
  };
  spawnIconRow = function(value, description) {
    var selectionElement;
    selectionElement = document.getElementById('icon_selection');
    return selectionElement.innerHTML += "<span><input type=\"radio\" name=\"icon_set\" value=\"" + value + "\" id=\"icon_set" + value + "\" /><label for=\"icon_set" + value + "\"><img src=\"/assets/icons/" + value + "/not_logged_in.png\" /><img src=\"/assets/icons/" + value + "/no_new.png\" /><img src=\"/assets/icons/" + value + "/new.png\" /> <small>" + description + "</small></span></label><br />";
  };
  add_account = function() {
    var acc_sel, newacc_domain;
    newacc_domain = prompt("Enter the domain name for your GAFYD account." + "\n\nDo not enter anything but the domain name!" + "\n\nIf your mail adress is <yourname@yourdomain.com>, simply enter \"yourdomain.com\"", "yourdomain.com");
    if ((newacc_domain != null) && newacc_domain !== "" && newacc_domain !== "yourdomain.com") {
      document.getElementById("check_gmail_off").checked = true;
      accounts.push({
        domain: newacc_domain
      });
      acc_sel = document.getElementById("accounts");
      return acc_sel.add(new Option(newacc_domain), null);
    }
  };
  remove_account = function() {
    var acc_sel, acc_todel, i;
    acc_sel = document.getElementById("accounts");
    acc_todel = void 0;
    if (acc_sel.selectedIndex > -1 && (acc_sel.options[acc_sel.selectedIndex] != null)) {
      acc_todel = acc_sel.options[acc_sel.selectedIndex];
      for (i in accounts) {
        if (accounts[i].domain === acc_todel.text) {
          console.log("removing account: " + accounts[i].domain);
          accounts.splice(i, 1);
          break;
        }
      }
      return acc_sel.remove(acc_sel.selectedIndex);
    }
  };
  add_label = function() {
    var labels_sel, newlabel;
    newlabel = prompt("Enter the name of the label." + "\n\nDo not enter anything but the label name!");
    if ((newlabel != null) && newlabel !== "" && newlabel !== "yourdomain.com") {
      labels_sel = document.getElementById("labels");
      labels_sel.add(new Option(newlabel), null);
      return labels_sel.size = accounts.length + 1;
    }
  };
  remove_label = function() {
    var i, label_todel, labels_sel;
    labels_sel = document.getElementById("labels");
    label_todel = void 0;
    if (labels_sel.selectedIndex > -1 && (labels_sel.options[labels_sel.selectedIndex] != null)) {
      label_todel = labels_sel.options[labels_sel.selectedIndex];
      for (i in accounts) {
        if (accounts[i].domain === label_todel.text) {
          console.log("removing account: " + accounts[i].domain);
          accounts.splice(i, 1);
          break;
        }
      }
      labels_sel.remove(labels_sel.selectedIndex);
      return labels_sel.size = accounts.length + 1;
    }
  };
  requestUserPermission = function() {
    var checkboxUserPermission;
    try {
      checkboxUserPermission = document.getElementById("show_notification");
      if (checkboxUserPermission.checked) {
        if (checkUserPermission()) {
          return;
        }
        if (typeof webkitNotifications === "undefined" || webkitNotifications === null) {
          return webkitNotifications.requestPermission(function() {
            var permissionGranted;
            permissionGranted = checkUserPermission();
            return checkboxUserPermission.checked = permissionGranted;
          });
        }
      }
    } catch (e) {
      return checkboxUserPermission.checked = false;
    }
  };
  document.getElementById('show_notification').onchange = requestUserPermission;
  checkUserPermission = function() {
    try {
      return webkitNotifications.checkPermission() === 0;
    } catch (e) {
      return false;
    }
  };
  toggleCheckBox = function(checkboxId, checked) {
    if (checked) {
      return document.getElementById(checkboxId).checked = !checked;
    }
  };
  handleAudioFile = function(fileList) {
    var file, fileReader;
    file = fileList[0];
    fileReader = new FileReader();
    fileReader.onloadend = function() {
      try {
        storage.set('temp', this.result);
      } catch (e) {
        alert('The file you have chosen is too large, please select a shorter sound alert.');
        return;
      } finally {
        storage.remove('temp');
      }
      $('#sn_audio_enc').val(this.result);
      $('#submit').val('Save &amp; Reload');
      return $('#submit').removeAttr('disabled');
    };
    fileReader.onabort = fileReader.onerror = function() {
      switch (this.error.code) {
        case FileError.NOT_FOUND_ERR:
          alert('File not found!');
          break;
        case FileError.SECURITY_ERR:
          alert('Security error!');
          break;
        case FileError.NOT_READABLE_ERR:
          alert('File not readable!');
          break;
        case FileError.ENCODING_ERR:
          alert('Encoding error in file!');
          break;
        default:
          alert('An error occured while reading the file!');
      }
      $('#submit').val('Save &amp; Reload');
      return $('#submit').removeAttr('disabled');
    };
    $('#submit').val('Processing...');
    $('#submit').attr('disabled', 'disabled');
    return fileReader.readAsDataURL(file);
  };
  playNotificationSound = function() {
    var audioElement, source;
    source = void 0;
    if (document.getElementById('sn_audio').value === 'custom') {
      if (document.getElementById('sn_audio_enc').value) {
        source = document.getElementById('sn_audio_enc').value;
      } else {
        source = storage.get('gc_sn_audio_raw');
      }
    } else {
      source = document.getElementById('sn_audio').value;
    }
    try {
      audioElement = new Audio();
      audioElement.src = source;
      return audioElement.play();
    } catch (e) {
      return console.error(e);
    }
  };
  restore_options();
  $('#play-sound').click(function() {
    return playNotificationSound();
  });
  $('#submit').click(function(e) {
    save_options();
    e.preventDefault();
    return false;
  });
  $('#submit-defaults').click(function(e) {
    storage.clear();
    storage.set('gc_check_label', 'unread');
    storage.set('gc_open_label', '#search/l:unread');
    storage.set('gc_check_label', 'important');
    storage.set('gc_open_label', '#mbox');
    storage.set('gc_check_label', '');
    storage.set('gc_open_label', '#inbox');
    storage.set('gc_poll', 15000);
    storage.set('gc_dn_timeout', 15000);
    storage.set('gc_sn_audio', '/assets/audio/chime.mp3');
    storage.set('gc_icon_set', 'set1');
    storage.set('gc_language', 'en');
    storage.set('gc_preview_setting', 2);
    storage.set('gc_show_notification', true);
    backgroundPage.init();
    window.location = window.location;
    return false;
  });
  $('#sn_audio_src').change(function() {
    return handleAudioFile(this.files);
  });
  $('#showContent0').click(function() {
    return showContent(0);
  });
  $('#showContent1').click(function() {
    return showContent(1);
  });
  $('#showContent2').click(function() {
    return showContent(2);
  });
  $('#showContent3').click(function() {
    return showContent(3);
  });
  $('#showContent4').click(function() {
    return showContent(4);
  });
  $('#add_account').click(function() {
    return add_account();
  });
  $('#remove_account').click(function() {
    return remove_account();
  });
  return $('#disable_ad_support').click(function() {
    return $('#donate_frame').fadeIn();
  });
});
