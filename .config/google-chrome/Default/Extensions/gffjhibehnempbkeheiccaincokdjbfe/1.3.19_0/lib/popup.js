// Generated by CoffeeScript 1.4.0
var allMail, backgroundPage, init, mailAccounts, mailCache, mailCount, scrollbar, storage, unreadCount, _init;

mailCount = 0;

mailCache = [];

allMail = void 0;

scrollbar = void 0;

unreadCount = 0;

allMail = [];

backgroundPage = null;

storage = null;

mailAccounts = null;

init = function() {
  backgroundPage = chrome.extension.getBackgroundPage();
  if ((backgroundPage != null) && backgroundPage.backgroundREADY) {
    storage = backgroundPage.storage;
    mailAccounts = backgroundPage.accounts;
    return _init();
  } else {
    return setTimeout(init, 300);
  }
};

_init = function() {
  var animationSpeed, archiveThread, composeNew, contractWindow, deleteThread, expandWindow, getThread, hideBody, hideElement, hideMail, hideReply, openInbox, openMail, openOptions, optionsEl, previewSetting, previousHeight, readThread, refreshEl, refreshMail, renderAccount, renderMail, replyTextKeyPress, replyTo, resizeWindow, sendPage, sendReply, showBody, showElement, showMail, showReply, spamThread, starThread, unreadThread;
  animationSpeed = 250;
  previewSetting = storage.get('gc_preview_setting');
  previousHeight = void 0;
  unreadCount = 0;
  $.each(mailAccounts, function(i, account) {
    return unreadCount += account.getUnreadCount();
  });
  hideElement = function(id) {
    var element;
    element = document.getElementById(id);
    if (element != null) {
      return element.style.display = "none";
    }
  };
  showElement = function(id) {
    var element;
    element = document.getElementById(id);
    if (element != null) {
      return element.style.display = "inline";
    }
  };
  openMail = function(accountId, mailid) {
    return mailAccounts[accountId].openThread(mailid);
  };
  openInbox = function(accountId) {
    var account, _i, _len;
    if (accountId == null) {
      accountId = 0;
      for (_i = 0, _len = mailAccounts.length; _i < _len; _i++) {
        account = mailAccounts[_i];
        if (account.getUnreadCount() > 0) {
          accountId = account.id;
          return false;
        }
      }
    }
    if (!(mailAccounts != null) || !(mailAccounts[accountId] != null)) {
      console.error("No mailaccount(s) found with account id " + accountId);
      return;
    }
    mailAccounts[accountId].openInbox();
    return window.close();
  };
  composeNew = function(accountId) {
    mailAccounts[accountId].composeNew();
    return window.close();
  };
  sendPage = function(accountId) {
    return chrome.tabs.getSelected(null, function(tab) {
      mailAccounts[accountId].sendPage(tab);
      return window.close();
    });
  };
  readThread = function(accountId, mailid, stayOpen) {
    hideMail(accountId, mailid, stayOpen);
    return mailAccounts[accountId].readThread(mailid);
  };
  unreadThread = function(accountId, mailid) {
    var mailElement, mailHeaderReadLink;
    mailAccounts[accountId].unreadThread(mailid);
    mailElement = document.getElementById(mailid);
    if (mailElement != null) {
      mailHeaderReadLink = document.getElementById(mailid + "_read-link");
      if (mailHeaderReadLink != null) {
        mailHeaderReadLink.href = "javascript:readThread('" + accountId + "', '" + mailid + "');";
        mailHeaderReadLink.innerHTML = i18n.get("readLink");
        return mailHeaderReadLink.title = i18n.get("readLinkTitle");
      }
    }
  };
  archiveThread = function(accountId, mailid) {
    hideMail(accountId, mailid);
    return mailAccounts[accountId].archiveThread(mailid);
  };
  deleteThread = function(accountId, mailid) {
    hideMail(accountId, mailid);
    return mailAccounts[accountId].deleteThread(mailid);
  };
  spamThread = function(accountId, mailid) {
    hideMail(accountId, mailid);
    return mailAccounts[accountId].spamThread(mailid);
  };
  starThread = function(accountId, mailid) {
    return mailAccounts[accountId].starThread(mailid);
  };
  replyTo = function(accountId, mailid) {
    return mailAccounts[accountId].replyTo(allMail[mailid]);
  };
  showReply = function(mailid) {
    var replyBox;
    return replyBox = document.getElementById(mailid + "_reply");
  };
  hideReply = function(mailid) {
    var replyBox;
    return replyBox = document.getElementById(mailid + "_reply");
  };
  sendReply = function(mailid) {
    var replyText, replyTextArea;
    replyTextArea = document.getElementById(mailid + "_replytext");
    replyText = replyTextArea.value;
    hideReply(mailid);
    return mailAccount.replyToThread({
      id: mailid,
      body: replyText
    });
  };
  getThread = function(accountId, mailid) {
    if (storage.get('gc_showfull_read')) {
      readThread(accountId, mailid, true);
    }
    if (mailCache[mailid] != null) {
      showBody(accountId, mailid, mailCache[mailid]);
      return false;
    }
    if (accountId != null) {
      return window.setTimeout(function() {
        return mailAccounts[accountId].getThread(accountId, mailid, showBody);
      }, 0);
    }
  };
  showBody = function(accountid, mailid, mailbody) {
    var fullscreenContainer, fullscreenContent, fullscreenControl, mail;
    if (mailbody != null) {
      mail = allMail[mailid];
      fullscreenContainer = $("#fullscreenContainer");
      fullscreenContent = $("#fullscreenContent");
      fullscreenControl = $("#fullscreenControls");
      fullscreenControl.find(".openLink").html(mail.shortTitle);
      fullscreenControl.find(".openLink").attr("title", Encoder.htmlDecode(mail.title));
      fullscreenControl.find(".authorLink").html(mail.authorName);
      fullscreenControl.find(".authorLink").attr("title", Encoder.htmlDecode(mail.authorMail));
      fullscreenControl.find(".issuedLink").html(formatDateTime(mail.issued, i18n.selected_lang.months, true));
      fullscreenControl.find(".issuedLink").attr("title", mail.issued);
      fullscreenControl.find(".readLink").text(i18n.get("readLink"));
      fullscreenControl.find(".deleteLink").text(i18n.get("deleteLink"));
      fullscreenControl.find(".spamLink").text(i18n.get("spamLink"));
      fullscreenControl.find(".archiveLink").text(i18n.get("archiveLink"));
      fullscreenControl.find(".starLink").attr("title", i18n.get("starLinkTitle"));
      fullscreenControl.find(".replyLink").attr("title", i18n.get("replyLinkTitle"));
      fullscreenControl.find(".readLink").attr("title", i18n.get("readLinkTitle"));
      fullscreenControl.find(".deleteLink").attr("title", i18n.get("deleteLinkTitle"));
      fullscreenControl.find(".spamLink").attr("title", i18n.get("spamLinkTitle"));
      fullscreenControl.find(".archiveLink").attr("title", i18n.get("archiveLinkTitle"));
      fullscreenContent.empty();
      fullscreenContent.html(mailbody);
      fullscreenContainer.empty();
      fullscreenContainer.append(fullscreenControl);
      fullscreenContainer.append(fullscreenContent);
      fullscreenControl.find(".closeLink").click(function() {
        return setTimeout(hideBody(), 0);
      });
      fullscreenControl.find(".readLink").click(function() {
        readThread(accountid, mailid);
        return setTimeout(hideBody(), 0);
      });
      fullscreenControl.find(".replyLink").click(function() {
        replyTo(accountid, mailid);
        return setTimeout(hideBody(), 0);
      });
      fullscreenControl.find(".deleteLink").click(function() {
        deleteThread(accountid, mailid);
        return setTimeout(hideBody(), 0);
      });
      fullscreenControl.find(".spamLink").click(function() {
        spamThread(accountid, mailid);
        return setTimeout(hideBody(), 0);
      });
      fullscreenControl.find(".archiveLink").click(function() {
        archiveThread(accountid, mailid);
        return setTimeout(hideBody(), 0);
      });
      fullscreenControl.find(".openLink").click(function() {
        openMail(accountid, mailid);
        return setTimeout(hideBody(), 0);
      });
      fullscreenControl.find(".starLink").click(function() {
        $(this).css("opacity", "1");
        return starThread(accountid, mailid);
      });
      fullscreenContainer.css("display", "block");
      mailCache[mailid] = mailbody;
      return expandWindow();
    }
  };
  hideBody = function() {
    $("#fullscreenContainer").css("display", "none");
    return contractWindow();
  };
  hideMail = function(accountId, mailid, stayOpen) {
    var accountElement;
    accountElement = $("#inbox_" + accountId);
    $("#" + mailid).remove();
    unreadCount = accountElement.find(".mail").length;
    if (unreadCount === 0) {
      accountElement.find(".toggleLink").hide("fast");
      accountElement.find(".unreadCount").fadeOut("fast");
      if (!stayOpen) {
        return window.close();
      }
    } else {
      return accountElement.find(".unreadCount").text("(" + unreadCount + ")");
    }
  };
  showMail = function(mailid) {
    var mailElement;
    mailElement = document.getElementById(mailid);
    if (mailElement != null) {
      return mailElement.style.display = "block";
    }
  };
  replyTextKeyPress = function(event, mailid) {
    if (event.shiftKey === 1 && event.keyCode === 13) {
      return sendReply(mailid);
    }
  };
  refreshMail = function() {
    return $.each(mailAccounts, function(i, account) {
      return account.refreshInbox(function() {
        return renderAccount(account);
      });
    });
  };
  openOptions = function() {
    return chrome.tabs.create({
      url: "views/options.html"
    });
  };
  resizeWindow = function() {
    var isExpanded;
    isExpanded = $("html").width() !== 500;
    if (isExpanded) {
      return contractWindow();
    } else {
      return expandWindow();
    }
  };
  expandWindow = function() {
    previousHeight = $("body").height();
    $("html").animate({
      width: [750, "swing"]
    }, animationSpeed);
    return $(".account").slideUp();
  };
  contractWindow = function() {
    $("html").animate({
      width: [500, "swing"]
    }, animationSpeed);
    $(".account").slideDown();
    return previousHeight = 0;
  };
  renderMail = function() {
    $("#content").empty();
    $.each(mailAccounts, function(i, account) {
      account.id = i;
      return renderAccount(account);
    });
    $(".inboxLink").click(function() {
      return openInbox($(this).attr("accountId"));
    });
    $(".composeLink").click(function() {
      return composeNew($(this).attr("accountId"));
    });
    return $(".sendpageLink").click(function() {
      return sendPage($(this).attr("accountId"));
    });
  };
  renderAccount = function(account) {
    var accountHtml, inboxElement;
    $("#content_" + account.id).remove();
    account.getNewAt();
    if (account.getMail() != null) {
      account.unreadCount = account.getMail().length;
    }
    accountHtml = accountTemplate(account, i18n);
    $(accountHtml).fadeIn("fast").appendTo("#content");
    inboxElement = $("#inbox_" + account.id);
    if (account.getMail() != null) {
      $.each(account.getMail(), function(j, mail) {
        var mailHtml;
        allMail[mail.id] = mail;
        mailHtml = mailTemplate(mail, i18n);
        return $(mailHtml).fadeIn("fast").appendTo(inboxElement);
      });
      if (account.getMail().length === 0) {
        inboxElement.find(".toggleLink").hide();
      }
      inboxElement.find(".toggleLink").click(function() {
        inboxElement.find(".mail").slideToggle("fast");
        if ($(this).find("img").attr("src") === "/assets/img/arrow_right.png") {
          return $(this).find("img").attr("src", "/assets/img/arrow_down.png");
        } else {
          return $(this).find("img").attr("src", "/assets/img/arrow_right.png");
        }
      });
    }
    inboxElement.find(".readLink").click(function() {
      return readThread(account.id, $(this).attr("mailId"));
    });
    inboxElement.find(".deleteLink").click(function() {
      return deleteThread(account.id, $(this).attr("mailId"));
    });
    inboxElement.find(".spamLink").click(function() {
      return spamThread(account.id, $(this).attr("mailId"));
    });
    inboxElement.find(".archiveLink").click(function() {
      return archiveThread(account.id, $(this).attr("mailId"));
    });
    inboxElement.find(".fullLink").click(function() {
      return getThread(account.id, $(this).attr("mailId"));
    });
    inboxElement.find(".summary").click(function() {
      return getThread(account.id, $(this).attr("mailId"));
    });
    inboxElement.find(".replyLink").click(function() {
      return replyTo(account.id, $(this).attr("mailId"));
    });
    inboxElement.find(".openLink").click(function() {
      return openMail(account.id, $(this).attr("mailId"));
    });
    return inboxElement.find(".starLink").click(function() {
      $(this).css("opacity", "1");
      return starThread(account.id, $(this).attr("mailId"));
    });
  };
  if (previewSetting === 0) {
    openInbox(0);
  } else if (previewSetting === 1 && unreadCount === 0) {
    openInbox(0);
  }
  backgroundPage.stopAnimateLoop();
  renderMail();
  refreshEl = $('#refresh');
  refreshEl.attr("title", i18n.get('refreshLinkTitle'));
  refreshEl.click(function() {
    return refreshMail();
  });
  optionsEl = $('#options');
  optionsEl.attr("title", i18n.get('optionsLinkTitle'));
  return optionsEl.click(function() {
    return openOptions();
  });
};

$(document).ready(function() {
  return init();
});
