// Generated by CoffeeScript 1.4.0
var accountWithNewestMail, accounts, animDelay, animTimer, audioElement, canvas, canvasContext, doAnimate, factor, getLabels, gfx, iconFormat, iconSet, img_newSrc, img_noNewSrc, img_notLoggedInSrc, loopTimer, mailError, mailUpdate, migrateSettings, notify, playSound, profilePhotos, reloadSettings, reloadSettings_complete, rotation, setIcon, startAnimate, startRequest, stopAnimate, stopAnimateLoop, storage, unreadCount;

accounts = void 0;

img_notLoggedInSrc = 'not_logged_in';

img_noNewSrc = 'no_new';

img_newSrc = 'new';

iconSet = 'set1';

iconFormat = '.png';

unreadCount = void 0;

accountWithNewestMail = void 0;

profilePhotos = void 0;

canvas = void 0;

canvasContext = void 0;

gfx = void 0;

rotation = 1;

factor = 1;

animTimer = void 0;

loopTimer = void 0;

animDelay = 10;

audioElement = new Audio();

storage = void 0;

stopAnimate = function() {
  if (animTimer != null) {
    clearTimeout(animTimer);
  }
  if (unreadCount > 0) {
    setIcon(img_newSrc);
  } else {
    setIcon(img_noNewSrc);
  }
  rotation = 1;
  return factor = 1;
};

stopAnimateLoop = function() {
  if (loopTimer != null) {
    clearTimeout(loopTimer);
  }
  return stopAnimate();
};

startAnimate = function() {
  if (!storage.get('gc_animate_off')) {
    stopAnimateLoop();
    animTimer = setInterval(doAnimate, animDelay);
    setTimeout(stopAnimate, 2000);
    return loopTimer = setInterval(startAnimate, 20000);
  }
};

doAnimate = function() {
  canvasContext.save();
  canvasContext.clearRect(0, 0, canvas.width, canvas.height);
  canvasContext.translate(Math.ceil(canvas.width / 2), Math.ceil(canvas.height / 2));
  canvasContext.rotate(rotation * 2 * Math.PI);
  canvasContext.drawImage(gfx, -Math.ceil(canvas.width / 2), -Math.ceil(canvas.height / 2));
  canvasContext.restore();
  rotation += 0.01 * factor;
  if (rotation <= 0.9 && factor < 0) {
    factor = 1;
  } else if (rotation >= 1.1 && factor > 0) {
    factor = -1;
  }
  return chrome.browserAction.setIcon({
    imageData: canvasContext.getImageData(0, 0, canvas.width, canvas.height)
  });
};

migrateSettings = function() {
  if (!(storage.get('gc_open_label') != null) || !(storage.get('gc_check_label') != null)) {
    storage.remove('gc_open_label');
    if ((storage.get('gc_check_all') != null) && storage.get('gc_check_all') === true) {
      storage.set('gc_check_label', 'unread');
      storage.set('gc_open_label', '#search/l:unread');
      return storage.remove('gc_check_all');
    } else if ((storage.get('gc_check_priority') != null) && storage.get('gc_check_priority') === true) {
      storage.set('gc_check_label', 'important');
      storage.set('gc_open_label', '#mbox');
      return storage.remove('gc_check_priority');
    } else {
      storage.set('gc_check_label', '');
      return storage.set('gc_open_label', '#inbox');
    }
  }
};

reloadSettings = function() {
  var account, _i, _len;
  unreadCount = 0;
  if (storage.get('gc_poll') == null) {
    storage.set('gc_poll', 15000);
  }
  if (storage.get('gc_dn_timeout') == null) {
    storage.set('gc_dn_timeout', 15000);
  }
  if (storage.get('gc_sn_audio') == null) {
    storage.set('gc_sn_audio', '/assets/audio/chime.mp3');
  }
  migrateSettings();
  reloadLanguage();
  iconSet = storage.get('gc_icon_set');
  if (!(iconSet != null) || iconSet === '') {
    iconSet = 'set1';
    storage.set('gc_icon_set', 'set1');
  }
  setIcon(img_notLoggedInSrc);
  chrome.browserAction.setBadgeBackgroundColor({
    color: [190, 190, 190, 255]
  });
  chrome.browserAction.setBadgeText({
    text: "?"
  });
  chrome.browserAction.setTitle({
    title: "Loading settings..."
  });
  if ((storage.get('gc_language')) == null) {
    storage.set('gc_language', 'en');
  }
  if ((storage.get('gc_preview_setting')) == null) {
    storage.set('gc_preview_setting', 2);
  }
  if ((storage.get('gc_show_notification')) == null) {
    storage.set('gc_show_notification', true);
  }
  if (accounts != null) {
    for (_i = 0, _len = accounts.length; _i < _len; _i++) {
      account = accounts[_i];
      account.stopScheduler();
    }
  }
  accounts = [];
  profilePhotos = {};
  chrome.browserAction.setBadgeText({
    text: "..."
  });
  chrome.browserAction.setTitle({
    title: "Polling accounts..."
  });
  if (!storage.get('gc_check_gmail_off')) {
    return $.ajax({
      url: "https://www.google.com/accounts/AddSession",
      success: function(data) {
        var idx, match, matches, _j, _len1;
        if (matches = data.match(/([\S]+?@[\S]+)/gi)) {
          for (idx = _j = 0, _len1 = matches.length; _j < _len1; idx = ++_j) {
            match = matches[idx];
            account = new MailAccount({
              accountNr: idx
            });
            account.onError = mailError;
            account.onUpdate = mailUpdate;
            accounts.push(account);
          }
        }
        return reloadSettings_complete();
      },
      complete: function() {
        if ((accounts != null ? accounts.length : void 0) === 0) {
          account = new MailAccount();
          account.onError = mailError;
          account.onUpdate = mailUpdate;
          accounts.push(account);
          return reloadSettings_complete();
        }
      }
    });
  } else {
    return reloadSettings_complete();
  }
};

reloadSettings_complete = function() {
  var account, savedAccounts, _i, _len;
  if ((savedAccounts = storage.get('gc_accounts')) != null) {
    for (_i = 0, _len = savedAccounts.length; _i < _len; _i++) {
      account = savedAccounts[_i];
      if (account.domain == null) {
        return;
      }
      account = new MailAccount({
        domain: account.domain
      });
      account.onError = mailError;
      account.onUpdate = mailUpdate;
      accounts.push(account);
    }
  }
  stopAnimateLoop();
  gfx.src = "/assets/icons/" + iconSet + "/new" + iconFormat;
  return window.setTimeout(startRequest, 0);
};

setIcon = function(iconName) {
  var fullPath;
  fullPath = "/assets/icons/" + iconSet + "/" + iconName + iconFormat;
  try {
    return chrome.browserAction.setIcon({
      path: fullPath
    });
  } catch (e) {
    return console.error("Could not set browser action icon '" + fullPath + "'.");
  }
};

startRequest = function() {
  var account, idx, _i, _len, _results;
  if (accounts != null) {
    _results = [];
    for (idx = _i = 0, _len = accounts.length; _i < _len; idx = ++_i) {
      account = accounts[idx];
      if (account != null) {
        _results.push(window.setTimeout(account.startScheduler, 500 * idx));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
};

mailUpdate = function(_account) {
  var account, hideCount, newUnreadCount, unreadText, _i, _len;
  stopAnimateLoop();
  hideCount = storage.get('gc_hide_count');
  newUnreadCount = 0;
  for (_i = 0, _len = accounts.length; _i < _len; _i++) {
    account = accounts[_i];
    if ((account != null) && account.getUnreadCount() > 0) {
      newUnreadCount += account.getUnreadCount();
    }
  }
  if (_account.getNewestMail() != null) {
    accountWithNewestMail = _account;
  }
  if (hideCount || newUnreadCount < 1) {
    chrome.browserAction.setBadgeText({
      text: ""
    });
  } else {
    chrome.browserAction.setBadgeText({
      text: newUnreadCount.toString()
    });
  }
  switch (newUnreadCount) {
    case 0:
      setIcon(img_noNewSrc);
      chrome.browserAction.setBadgeBackgroundColor({
        color: [110, 140, 180, 255]
      });
      chrome.browserAction.setTitle({
        title: i18n.get("noUnreadText")
      });
      break;
    case 1:
      setIcon(img_newSrc);
      chrome.browserAction.setBadgeBackgroundColor({
        color: [200, 100, 100, 255]
      });
      if (i18n.get("oneUnreadText")) {
        unreadText = i18n.get("oneUnreadText");
      } else {
        unreadText = i18n.get("severalUnreadText");
      }
      chrome.browserAction.setTitle({
        title: newUnreadCount + " " + unreadText
      });
      break;
    default:
      setIcon(img_newSrc);
      chrome.browserAction.setBadgeBackgroundColor({
        color: [200, 100, 100, 255]
      });
      chrome.browserAction.setTitle({
        title: newUnreadCount + " " + i18n.get("severalUnreadText")
      });
  }
  if (newUnreadCount > unreadCount) {
    setTimeout(playSound, 0);
    setTimeout(startAnimate, 0);
    if (accountWithNewestMail != null) {
      setTimeout(notify, 0);
    }
  }
  return unreadCount = newUnreadCount;
};

mailError = function() {
  setIcon(img_notLoggedInSrc);
  chrome.browserAction.setBadgeBackgroundColor({
    color: [190, 190, 190, 255]
  });
  chrome.browserAction.setBadgeText({
    text: "X"
  });
  chrome.browserAction.setTitle({
    title: "Not logged in"
  });
  return unreadCount = 0;
};

playSound = function() {
  var source;
  if (storage.get('gc_sound_off')) {
    return;
  }
  source = storage.get('gc_sn_audio');
  if (source === "custom") {
    source = storage.get('gc_sn_audio_raw');
  }
  try {
    audioElement.src = source;
    audioElement.load();
    return audioElement.play();
  } catch (err) {
    return console.error(err);
  }
};

notify = function() {
  var notification, timeout;
  if (storage.get('gc_show_notification')) {
    try {
      notification = webkitNotifications.createHTMLNotification(chrome.extension.getURL("/views/notify.html"));
      timeout = storage.get('gc_dn_timeout');
      notification.show();
      if (timeout > 0) {
        return setTimeout(function() {
          notification.close();
          return notification.cancel();
        }, timeout);
      }
    } catch (err) {
      return console.error(err);
    }
  }
};

getLabels = function(mailURL, callback) {
  var getURL;
  getURL = mailURL + "h/" + Math.ceil(1000000 * Math.random()) + "/?v=prl";
  return $.ajax({
    url: getURL,
    success: function(data) {
      var labelArray, labelPage, labels;
      labelArray = [];
      labelPage = $(data);
      labels = $("div.prf > table > tbody > tr > td > b > a", labelPage);
      labels.each(function(i) {
        return labelArray.push($(this)[0].innerText);
      });
      if (callback != null) {
        return setTimeout(callback(labelArray), 0);
      }
    }
  });
};

window.init = function() {
  canvas = document.createElement('canvas');
  canvas.setAttribute('height', 19);
  canvas.setAttribute('width', 19);
  canvasContext = canvas.getContext('2d');
  gfx = document.createElement('img');
  gfx.setAttribute('height', 19);
  gfx.setAttribute('width', 19);
  return AU.init({
    donationUrl: 'https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=L5RHX5RSVBC5N',
    updateUrl: 'http://u.yieldsquare.com/mailcheckerplus.json',
    postInstallUrl: 'http://www.mailcheckerplus.com/thankyou/1.3.16/',
    googleAnalytics: {
      accountId: 'UA-37598627-1'
    }
  }, function() {
    return storage = AU.storage(function() {
      reloadSettings();
      return window.backgroundREADY = true;
    });
  });
};

$(document).ready(function() {
  return init();
});

chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
  AU.storage(function(storage) {
    var disableMailTo, openInTab;
    openInTab = storage.get('gc_open_tabs');
    disableMailTo = storage.get('gc_no_mailto');
    if (request.getNewMail) {
      sendResponse({
        mailAccount: accountWithNewestMail,
        newMail: accountWithNewestMail.getNewestMail(),
        mailURL: accountWithNewestMail.getURL(),
        profilePhotos: profilePhotos
      });
    }
    if (request.command === 'getURL') {
      if ((!disableMailTo) && ((accounts != null) && accounts.length > 0)) {
        return sendResponse({
          URL: accounts[0].getURL(),
          openTab: openInTab
        });
      } else {
        return sendResponse({
          URL: null
        });
      }
    } else if (request.requestType) {
      switch (request.requestType) {
        case 'openNewTab':
          return chrome.tabs.create({
            index: 100000000,
            url: request.linkURL
          });
      }
    }
  });
  return true;
});
